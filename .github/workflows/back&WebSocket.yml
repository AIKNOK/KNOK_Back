name: Deploy Django + WebSocket to ECS

on:
  push:
    branches: [ jaeyeop ]

env:
  AWS_REGION: ap-northeast-2
  # 테스트용 ECR 리포지토리
  ECR_BACKEND_REPO:   backend-test
  ECR_WEBSOCKET_REPO: websocket-test
  # 테스트용 ECS 서비스/클러스터
  ECS_BACKEND_SERVICE:   knok-backend-test
  ECS_WEBSOCKET_SERVICE: knok-websocket-test
  ECS_CLUSTER: knok-cluster-test
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  # 커밋-SHA 기반 태그
  IMAGE_TAG: test-${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v1

    - name: Free disk space
      run: docker system prune -af

    # ─────────────── Backend 이미지 ───────────────
    - name: Build & push Backend
      run: |
        docker build -t $ECR_BACKEND_REPO -f Dockerfile.backend .
        docker tag  $ECR_BACKEND_REPO:latest \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BACKEND_REPO:$IMAGE_TAG
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BACKEND_REPO:$IMAGE_TAG

    # ─────────────── Websocket 이미지 ─────────────
    - name: Build & push WebSocket
      run: |
        docker build -t $ECR_WEBSOCKET_REPO -f Dockerfile.websocket .
        docker tag  $ECR_WEBSOCKET_REPO:latest \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_WEBSOCKET_REPO:$IMAGE_TAG
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_WEBSOCKET_REPO:$IMAGE_TAG
      
    # ─────────────── 태스크 정의 렌더링 ─────────────
    - name: Replace env vars in backend task def
      run: |
        sed -e "s|\${AWS_REGION}|${{ env.AWS_REGION }}|g" \
            -e "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" \
            -e "s|\${AWS_ACCESS_KEY_ID}|${{ secrets.AWS_ACCESS_KEY_ID }}|g" \
            -e "s|\${AWS_SECRET_ACCESS_KEY}|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" \
            -e "s|\${COGNITO_APP_CLIENT_SECRET}|${{ secrets.COGNITO_APP_CLIENT_SECRET }}|g" \
            ecs-task-def-backend.json > ecs-task-def-backend.rendered.json

    - id: render-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-def-backend.rendered.json
        container-name: knok-backend-test          # 태스크 JSON 내 name 과 동일해야 함
        image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND_REPO }}:${{ env.IMAGE_TAG }}

    - name: Replace env vars in websocket task def
      run: |
        sed -e "s|\${AWS_REGION}|${{ env.AWS_REGION }}|g" \
            -e "s|\${AWS_ACCESS_KEY_ID}|${{ secrets.AWS_ACCESS_KEY_ID }}|g" \
            -e "s|\${AWS_SECRET_ACCESS_KEY}|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" \
            ecs-task-def-websocket.json > ecs-task-def-websocket.rendered.json

    - id: render-websocket
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-def-websocket.rendered.json
        container-name: knok-websocket-test        # 태스크 JSON 내 name 과 동일해야 함
        image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_WEBSOCKET_REPO }}:${{ env.IMAGE_TAG }}

    # ─────────────── 서비스 업데이트 ───────────────
    - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster:          ${{ env.ECS_CLUSTER }}
        service:          ${{ env.ECS_BACKEND_SERVICE }}
        task-definition:  ${{ steps.render-backend.outputs.task-definition }}
        wait-for-service-stability: false

    - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster:          ${{ env.ECS_CLUSTER }}
        service:          ${{ env.ECS_WEBSOCKET_SERVICE }}
        task-definition:  ${{ steps.render-websocket.outputs.task-definition }}
        wait-for-service-stability: false

        # ─────────────── CodeDeploy로 배포 트리거 추가 ───────────────
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
          
    - name: Trigger CodeDeploy (backend)
      run: |
        aws deploy create-deployment \
          --application-name      test \
          --deployment-group-name knok-backend-test-group \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --description "BG deploy ${GITHUB_SHA}" \
          --revision revisionType=AppSpecContent,\
          appSpecContent="{\"content\":\"$(jq -Rs < appspec-temp.json)\",\"sha256\":null}"