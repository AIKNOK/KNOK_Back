# ────────────────────────────────
# 🔧 Stage 1: 빌드용 Python 환경
# ────────────────────────────────
FROM python:3.10-slim AS builder

WORKDIR /app

# requirements 복사
COPY requirements.backend.txt ./requirements.backend.txt
COPY requirements.common.txt ./requirements.common.txt

# 시스템 패키지 설치
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc g++ make libpq-dev python3-dev libffi-dev libsndfile1 ffmpeg libgl1 git \
    libjpeg-dev libtiff5 zlib1g libopenjp2-7 \
    && rm -rf /var/lib/apt/lists/*

# pip 패키지 설치
RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r requirements.backend.txt

# KeyBERT 모델 캐싱
ENV HF_HOME=/root/.cache/huggingface
RUN python3 - <<'PY'
from keybert import KeyBERT
KeyBERT('distiluse-base-multilingual-cased-v1')
PY


# ────────────────────────────────
# 🚀 Stage 2: 실행용 Slim 환경
# ────────────────────────────────
FROM python:3.10-slim

# 환경 변수 설정
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/app:/app/backend" \
    HF_HOME=/root/.cache/huggingface

# 작업 디렉토리 설정
WORKDIR /app/audio
COPY audio /app/audio

WORKDIR /app/backend

# 실행에 필요한 시스템 패키지
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev libsndfile1 ffmpeg libgl1 \
    libjpeg-dev libtiff5 zlib1g libopenjp2-7 \
    && rm -rf /var/lib/apt/lists/*

# Python 패키지 및 실행 바이너리 복사
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /root/.cache/huggingface /root/.cache/huggingface

# 공통 유틸 코드 포함 (예: keyword_extractor 등)
COPY common /app/common

# 백엔드 앱 복사
COPY backend /app/backend
COPY backend/entrypoint.sh /app/backend/entrypoint.sh
RUN chmod +x /app/backend/entrypoint.sh

# 포트 오픈 및 실행 명령 설정
EXPOSE 8000
CMD ["./entrypoint.sh"]
