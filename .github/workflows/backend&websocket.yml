name: Deploy backend-test (Blue/Green)

on:
  push:
    branches: [ jaeyeop ]

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  # 백엔드 서비스용
  CLUSTER:             knok-cluster-test
  SERVICE:             knok-backend-test
  ECR_REPO:            backend-test

  # WebSocket 서비스용
  WS_SERVICE:          knok-websocket-test
  ECR_WEBSOCKET_REPO:  websocket-test

  # CodeDeploy
  CODEDEPLOY_APP:      test
  BACKEND_DG:          knok-backend-test-group
  WS_DG:               knok-websocket-test-group

  # 태그
  IMAGE_TAG: test-${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v1

    - name: Install tools
      run: sudo apt-get update && sudo apt-get install -y jq

    ##################################
    # 1. 백엔드 컨테이너 빌드 & 배포 #
    ##################################
    - name: Build & push backend image
      run: |
        docker build -t $ECR_REPO -f Dockerfile.backend .
        docker tag $ECR_REPO:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
        docker push       $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG

    - name: Render backend task definition
      run: |
        sed \
          -e "s|\${AWS_REGION}|$AWS_REGION|g" \
          -e "s|\${IMAGE_URI}|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG|g" \
          ecs-task-def-backend.json > taskdef.render.json

    - name: Deploy backend service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster:         ${{ env.CLUSTER }}
        service:         ${{ env.SERVICE }}
        task-definition: taskdef.render.json
        wait-for-service-stability: false

    - name: Build backend AppSpec
      run: sed "s|__IMAGE_TAG__|$IMAGE_TAG|g" appspec-backend.json > appspec-final.json

    - name: CodeDeploy backend
      run: |
        aws deploy create-deployment \
          --application-name       $CODEDEPLOY_APP \
          --deployment-group-name  $BACKEND_DG \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --file-exists-behavior   OVERWRITE \
          --revision revisionType=AppSpecContent,\
          appSpecContent="{\"content\":\"$(jq -Rs < appspec-final.json)\",\"sha256\":null}" \
          --description "BG deploy (backend) ${{ github.sha }}"

    ##################################
    # 2. WebSocket 컨테이너 배포     #
    ##################################
    - name: Build & push websocket image
      run: |
        docker build -t $ECR_WEBSOCKET_REPO -f Dockerfile.websocket .
        docker tag $ECR_WEBSOCKET_REPO:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_WEBSOCKET_REPO:$IMAGE_TAG
        docker push             $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_WEBSOCKET_REPO:$IMAGE_TAG

    - name: Render websocket task definition
      run: |
        sed \
          -e "s|\${AWS_REGION}|$AWS_REGION|g" \
          -e "s|\${IMAGE_URI}|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_WEBSOCKET_REPO:$IMAGE_TAG|g" \
          ecs-task-def-websocket.json > ws-taskdef.render.json

    - name: Deploy websocket service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster:         ${{ env.CLUSTER }}
        service:         ${{ env.WS_SERVICE }}
        task-definition: ws-taskdef.render.json
        wait-for-service-stability: false

    - name: Build websocket AppSpec
      run: sed "s|__IMAGE_TAG__|$IMAGE_TAG|g" appspec-websocket.json > appspec-ws-final.json

    - name: CodeDeploy websocket
      run: |
        aws deploy create-deployment \
          --application-name       $CODEDEPLOY_APP \
          --deployment-group-name  $WS_DG \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --file-exists-behavior   OVERWRITE \
          --revision revisionType=AppSpecContent,\
          appSpecContent="{\"content\":\"$(jq -Rs < appspec-ws-final.json)\",\"sha256\":null}" \
          --description "BG deploy (websocket) ${{ github.sha }}"
