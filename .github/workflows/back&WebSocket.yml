name: Deploy Django + WebSocket to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_BACKEND_REPO: knok-backend
  ECR_WEBSOCKET_REPO: knok-websocket
  ECS_BACKEND_SERVICE: knok-backend-service
  ECS_WEBSOCKET_SERVICE: knok-websocket-service
  ECS_CLUSTER: knok-cluster-pri
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.backend
        push: true
        tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND_REPO }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Build and push WebSocket image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.websocket
        push: true
        tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_WEBSOCKET_REPO }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Render backend task definition
      id: render-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-def-backend.json
        container-name: knok-backend
        image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND_REPO }}:latest

    - name: Render websocket task definition
      id: render-websocket
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-def-websocket.json
        container-name: knok-websocket
        image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_WEBSOCKET_REPO }}:latest

    - name: Deploy Backend to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster: ${{ env.ECS_CLUSTER }}
        service: ${{ env.ECS_BACKEND_SERVICE }}
        task-definition: ${{ steps.render-backend.outputs.task-definition }}
        wait-for-service-stability: true

    - name: Deploy WebSocket to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster: ${{ env.ECS_CLUSTER }}
        service: ${{ env.ECS_WEBSOCKET_SERVICE }}
        task-definition: ${{ steps.render-websocket.outputs.task-definition }}
        wait-for-service-stability: true
