name: CI/CD for Django Backend

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - "Dockerfile.backend"
      - "requirements.txt"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 👉 Docker Buildx 활성화
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 👉 Docker 레이어 캐시 설정
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and Push Docker Image to ECR with Cache
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_BACKEND_REPO }}
        IMAGE_TAG: backend-${{ github.sha }}
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --file Dockerfile.backend \
          --tag $ECR_REPOSITORY:$IMAGE_TAG \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --push \
          .

        # Replace old cache
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Get current ECS task definition
      id: get-task-def
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ secrets.ECS_BACKEND_TASK }} \
          --query 'taskDefinition' > task-definition.json

    - name: Create new ECS task definition with updated image
      id: new-task-def
      run: |
        IMAGE="${{ secrets.ECR_BACKEND_REPO }}:backend-${{ github.sha }}"
        jq '.containerDefinitions[0].image = "'$IMAGE'"' task-definition.json \
        | jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
        > new-task-def.json

        aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          > task-def-response.json

        echo "TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' task-def-response.json)" >> $GITHUB_ENV

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: new-task-def.json
        service: ${{ secrets.ECS_BACKEND_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        wait-for-service-stability: false
